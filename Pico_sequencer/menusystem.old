
// Copyright 2020 Rich Heslip
//
// Author: Rich Heslip 
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
// 
// See http://creativecommons.org/licenses/MIT/ for more information.
//
// -----------------------------------------------------------------------------
//
// this is adapted from my XVA1 menu system. this one is bitmapped so its a mix of character and pixel addressing
// Feb 2022 - adapted again as a single encoder menu system - very similar to the Arduino Neu-rah menu system but only 2 levels
// menu items are displayed top to bottom of screen with a title bar
// encoder scrolls menu selector, click to select submenu
// encoder scrolls submenu selector, click to edit parameter
// last submenu item is treated as "back to top menu" so make sure its set up that way
// parameters can be:
// text strings which return ordinals
// integers in range -9999 to +9999, range and increment set in the subment table
// floats in range -9.99 to +9.99 - floats are displayed but the parameter behind them is an int in the range -999 to +999 so your code has to convert the in to float
// the parameter field in the submenu initializer must point to an integer variable - when you edit the on screen value its this value you are changing
// the handler field in the submenu initializer must be either null or point to a function which is called when you edit the parameter

#define DISPLAY_X 20  // 20 char display
#define DISPLAY_Y 8   // 8 lines
#define DISPLAY_CHAR_HEIGHT 8 // character height in pixels - for bitmap displays
#define DISPLAY_CHAR_WIDTH 6 // character width in pixels - for bitmap displays
#define DISPLAY_X_MENUPAD 2   // extra space between menu items
#define DISPLAY_Y_MENUPAD 2   // extra vertical space between menu items
#define TOPMENU_LINE 1    // line to start menus on
#define TOPMENU_Y (TOPMENU_LINE*(DISPLAY_CHAR_HEIGHT+DISPLAY_Y_MENUPAD))   // pixel y position to display top menus
#define TOPMENU_X (1 * DISPLAY_CHAR_WIDTH)   // x pos to display top menus - first character reserved for selector character
#define TOPMENU_LINES 5 // number of menu text lines to display
#define SUBMENU_LINE 1 // line to start sub menus on
#define SUBMENU_Y (SUBMENU_LINE*(DISPLAY_CHAR_HEIGHT+DISPLAY_Y_MENUPAD))   // line to display sub menus
#define SUBMENU_X (1 * DISPLAY_CHAR_WIDTH)   // x pos to display sub menus name field
#define SUBMENU_VALUE_X (14 * DISPLAY_CHAR_WIDTH)  // x pos to display submenu values
#define SUBMENU_LINES 5 // number of menu text lines to display
#define FILEMENU_LINES 5 // number of files to show 
#define FILEMENU_X (1 * DISPLAY_CHAR_WIDTH)   // x pos to display file menus - first character reserved for selector character
#define FILEMENU_Y (TOPMENU_LINE*(DISPLAY_CHAR_HEIGHT+DISPLAY_Y_MENUPAD))   // pixel y position to display file menus

const char *menutitle;  // points to title of current menu/submenu
const char *maintitle=" Sequencer Menu   ";

int8_t topmenuindex=0;  // keeps track of which top menu item we are displaying

enum paramtype{TYPE_NONE,TYPE_INTEGER,TYPE_FLOAT, TYPE_TEXT,TYPE_FILENAME}; // parameter display types

	
// submenus 
struct submenu {
  const char *name; // display name
  int16_t min;  // min value of parameter
  int16_t max;  // max value of parameter
  int16_t step; // step size. if 0, don't print ie spacer
  enum paramtype ptype; // how its displayed
  const char ** ptext;   // points to array of text for text display
  int16_t *parameter; // value to modify
  void (*handler)(void);  // function to call on value change
};

// top menus
struct menu {
   const char *name; // menu text
   struct submenu * submenus; // points to submenus for this menu
   int8_t submenuindex;   // stores the index of the submenu we are currently using
   int8_t numsubmenus; // number of submenus - not sure why this has to be int but it crashes otherwise. compiler bug?
};

// dummy variable for menu testing
int16_t dummy;



void testfunc(void) {
  printf("test function %d\n",dummy);
}; // 

// for sorting filenames in alpha order
int comp(const void *a,const void *b) {
return (strcmp((char *)a,(char *)b));
}
 
// ********** menu structs that build the menu system below *********


// text arrays used for submenu TYPE_TEXT fields
//const char * textmode[] = {"Trig", "Loop", "Gated"};
//{CHROMATIC,MAJOR,MINOR,HARMONIC_MINOR,MAJOR_PENTATONIC,MINOR_PENTATONIC,DORIAN,PHRYGIAN,LYDIAN,MIXOLYDIAN};
const char * scalenames[] = {"Chrom","Major", "Minor","Hminr","MPent","mPent","Doria","Phryg","Lydia","Mixol"};

struct submenu note1params[] = {
  // name,min,max,step,type,*textfield,*parameter,*handler
  "Root",20,110,1,TYPE_INTEGER,0,&notes.root,0,
  "MIDI Ch",1,16,1,TYPE_INTEGER,0,&MIDIchannel,0,
  "BACK",0,0,1,TYPE_NONE,0,&dummy,0,
};

struct submenu probabilityparams[] = {
  // name,min,max,step,type,*textfield,*parameter,*handler
  "Eucl Length",1,16,1,TYPE_INTEGER,0,&probability.euclen,eucprobability,
  "Eucl Beats",1,16,1,TYPE_INTEGER,0,&probability.eucbeats,eucprobability,
  "Eucl Offset",0,15,1,TYPE_INTEGER,0,&probability.root,eucprobability,
  "BACK",0,0,1,TYPE_NONE,0,&dummy,0,
};
/*
struct submenu offset1params[] = {
  // name,min,max,step,type,*textfield,*parameter,*handler
  "Clock divider",0,192,1,TYPE_INTEGER,0,&offsets.divider,0,
  "BACK",0,0,1,TYPE_NONE,0,&dummy,0,
};
*/
struct submenu clockparams[] = {
  // name,min,max,step,type,*textfield,*parameter,*handler
  "BPM",20,240,1,TYPE_INTEGER,0,&bpm,0,
  "Note    div",0,192,1,TYPE_INTEGER,0,&notes.divider,0,
  "Gate    div",0,192,1,TYPE_INTEGER,0,&gates.divider,0,
  "Velo    div",0,192,1,TYPE_INTEGER,0,&velocities.divider,0,
  "Offset  div",0,192,1,TYPE_INTEGER,0,&offsets.divider,0,
  "Prob    div",0,192,1,TYPE_INTEGER,0,&probability.divider,0,
  "Ratchet div",0,192,1,TYPE_INTEGER,0,&ratchets.divider,0,
  "BACK",0,0,1,TYPE_NONE,0,&dummy,0,
};

struct submenu quantizerparams[] = {
  // name,min,max,step,type,*textfield,*parameter,*handler
  "Scale",0,9,1,TYPE_TEXT,scalenames,&current_scale,0,
  "BACK",0,0,1,TYPE_NONE,0,&dummy,0,
};

// top level menu structure - each top level menu contains one submenu
struct menu mainmenu[] = {
  // name,submenu *,initial submenu index,number of submenus
  "Notes",note1params,0,sizeof(note1params)/sizeof(submenu), 
  "Clocks ",clockparams,0,sizeof(clockparams)/sizeof(submenu),
  "Quantizer ",quantizerparams,0,sizeof(quantizerparams)/sizeof(submenu),
  "Probability ",probabilityparams,0,sizeof(probabilityparams)/sizeof(submenu),
  "BACK ",clockparams,0,sizeof(clockparams)/sizeof(submenu),
 };

#define NUM_MAIN_MENUS sizeof(mainmenu)/ sizeof(menu)
menu * topmenu=mainmenu;  // points at current menu

// highlight the currently selected menu item
void drawselector( int8_t index) {
  int line = index % TOPMENU_LINES;
  display.setCursor (0, TOPMENU_Y+DISPLAY_Y_MENUPAD+line*(DISPLAY_CHAR_HEIGHT+DISPLAY_Y_MENUPAD) );
  display.print(">"); 
#ifdef OLED_DISPLAY
  display.display();
#endif
}

// highlight the currently selected menu item as being edited
void draweditselector( int8_t index) {
  int line = index % TOPMENU_LINES;
  display.setCursor (0, TOPMENU_Y+DISPLAY_Y_MENUPAD+line*(DISPLAY_CHAR_HEIGHT+DISPLAY_Y_MENUPAD) );
  display.print("*"); 
#ifdef OLED_DISPLAY
  display.display();
#endif
}

// dehighlight the currently selected menu item
void undrawselector( int8_t index) {
  int line = index % TOPMENU_LINES;
  display.setCursor (0, TOPMENU_Y+DISPLAY_Y_MENUPAD+line*(DISPLAY_CHAR_HEIGHT+DISPLAY_Y_MENUPAD) );
  display.print(" "); 
#ifdef OLED_DISPLAY
  display.display();
#endif
}

// display the top menu
// index - currently selected top menu
void drawtopmenu( int8_t index) {
    display.fillScreen(BLACK);
    display.setCursor(0,0);
    display.printf("%s",menutitle);
    int i = (index/TOPMENU_LINES)*TOPMENU_LINES; // which group of menu items to display
    int last = i+NUM_MAIN_MENUS % TOPMENU_LINES; // show only up to the last menu item
    if ((i + TOPMENU_LINES) <= NUM_MAIN_MENUS) last = i+TOPMENU_LINES; // handles case like 2nd of 3 menu pages
    int y=TOPMENU_Y+DISPLAY_Y_MENUPAD;

    for (i; i< last ; ++i) {
      display.setCursor ( TOPMENU_X, y ); 
      display.print(topmenu[i].name);
/*    
	  if (i < NUM_VOICES) {			// items 0-7 are always samples - show the sample filename
		  char temp[DISPLAY_X];  // chop the name to no more than 18 chars
		  strncpy(temp,sample[voice[i].sample].sname,DISPLAY_X-3); // 3 columns are used: selector, sample#, space
          temp[DISPLAY_X-3]=0; // null terminate
		  display.print(temp);  // 
	  }
 */   
      y+=DISPLAY_CHAR_HEIGHT+DISPLAY_Y_MENUPAD;
    }
#ifdef OLED_DISPLAY
    display.display();
#endif
} 

// display a sub menu item and its value
// index is the index into the current top menu's submenu array

void drawsubmenu( int8_t index) {
    submenu * sub;
    sub=topmenu[topmenuindex].submenus; //get pointer to the submenu array
    // print the name text
    int y= SUBMENU_Y+DISPLAY_Y_MENUPAD +(index % SUBMENU_LINES)*(DISPLAY_CHAR_HEIGHT+DISPLAY_Y_MENUPAD); // Y position of this menu index
    display.setCursor (SUBMENU_X,y) ; // set cursor to parameter name field
    display.print(sub[index].name); 
    
    // print the value
    display.setCursor (SUBMENU_VALUE_X, y ); // set cursor to parameter value field
    display.print("      "); // erase old value
    display.setCursor (SUBMENU_VALUE_X, y ); // set cursor to parameter value field
    if (sub[index].step !=0) { // don't print dummy parameter 
      int16_t val=*sub[index].parameter;  // fetch the parameter value
      char temp[5];
      switch (sub[index].ptype) {
        case TYPE_INTEGER:   // print the value as an unsigned integer    
          sprintf(temp,"%4d",val); // lcd.print doesn't seem to print uint8 properly
          display.print(temp);  
          display.print(" ");  // blank out any garbage
          break;
        case TYPE_FLOAT:   // print the int value as a float  
          sprintf(temp,"%1.2f",(float)val/1000); // menu should have int value between -1000 to +1000 so float is -1 to +1
          display.print(temp);  
          display.print(" ");  // blank out any garbage
          break;
        case TYPE_TEXT:  // use the value to look up a string
          if (val > sub[index].max) val=sub[index].max; // sanity check
          if (val < 0) val=0; // min index is 0 for text fields
          display.print(sub[index].ptext[val]); // parameter value indexes into the string array
          display.print(" ");  // blank out any garbage
          break;
          /*
		    case TYPE_FILENAME:  // print filename of sample using index in min
		      display.setCursor (SUBMENU_X, y ); // leave room for selector
		      char temp[DISPLAY_X];  // chop the name to no more than 20 chars
		      //strncpy(temp,samp[sub[index].min].filename,DISPLAY_X-1); 
          strncpy(temp,sample[voice[topmenuindex].sample].sname,DISPLAY_X-1); // use topmenuindex to file sample's filename 
          strcat(temp,"");
		      display.print(temp);  // 
        break;
        */
        default:
        case TYPE_NONE:  // blank out the field
          display.print("     ");
          break;
      } 
    }
#ifdef OLED_DISPLAY
    display.display();
#endif 
}

// display sub menus of the current topmenu

void drawsubmenus() {
    int8_t index,len;
    index= topmenu[topmenuindex].submenuindex; // submenu field index
    len= topmenu[topmenuindex].numsubmenus; // number of submenu items
    submenu * sub=topmenu[topmenuindex].submenus; //get pointer to the current submenu array
    display.fillScreen(BLACK);
    display.setCursor(0,0);
    display.printf("    %s",topmenu[topmenuindex].name); // show the menu we came from at top of screen
    int i = (index/SUBMENU_LINES)*SUBMENU_LINES; // which group of menu items to display
    int last = i+len % SUBMENU_LINES; // show only up to the last menu item
    if ((i + SUBMENU_LINES) <= len) last = i+SUBMENU_LINES; // handles case like 2nd of 3 menu pages
    int y=SUBMENU_Y+DISPLAY_Y_MENUPAD;

    for (i; i< last ; ++i) {
      //display.setCursor ( SUBMENU_X, y ); 
      //display.print(sub[i].name);
      //y+=DISPLAY_CHAR_HEIGHT+DISPLAY_Y_MENUPAD;
      drawsubmenu(i);
    }
#ifdef OLED_DISPLAY
    display.display();
#endif
} 


// menu handler
// a run to completion state machine - it never blocks except while waiting for encoder button release
// allows the rest of the application to keep playing audio while parameters are adjusted

enum uimodes{ENTRY,TOPSELECT,SUBSELECT,PARAM_INPUT,WAITFORBUTTONUP}; // UI state machine states

int16_t menustate=TOPSELECT; // start out at top menu

int domenus(void) {
  int16_t enc;
  int8_t index; 

//  ClickEncoder::Button button; 
  
  enc=menuenc.getValue();
//  button= Encoder2.getButton();

  // process the menu encoder 
//  enc=P4Encoder.getValue();
//  button= P4Encoder.getButton();

  switch (menustate) {
    case ENTRY:  // we just started the menus again
      drawtopmenu(topmenuindex); // redraw
      drawselector(topmenuindex);
      while(!digitalRead(MENU_ENCSW_IN)); // wait till button released - long press is what gets us to this state
      delay(10); // let button state settle
      menustate=TOPSELECT;
      break;
    case TOPSELECT:  // scrolling thru top menu
      if (enc !=0 ) { // move selector
        int topmenupage = (topmenuindex) / TOPMENU_LINES;  
        undrawselector(topmenuindex);
        topmenuindex+=enc;
        if (topmenuindex <0) topmenuindex=0;  // we don't wrap menus around, just stop at the ends
        if (topmenuindex >=(NUM_MAIN_MENUS -1) ) topmenuindex=NUM_MAIN_MENUS-1; 
        if ((topmenuindex / TOPMENU_LINES) != topmenupage) {
          drawtopmenu(topmenuindex);  // redraw if we scrolled beyond the menu page
        }
        drawselector(topmenuindex);    
      }
      if (!digitalRead(MENU_ENCSW_IN)) { // menu item has been selected so show submenu
        if (topmenuindex == (NUM_MAIN_MENUS -1)) {  // this is kind of hokey - last menu is "exit" so return exits status
          while(!digitalRead(MENU_ENCSW_IN)); // wait till button released
          delay(10); // let button state settle
          return(FALSE); // we have exited
        }
        topmenu[topmenuindex].submenuindex=0;  // start from the first item
        drawsubmenus();
        drawselector(topmenu[topmenuindex].submenuindex);  
        menustate=SUBSELECT;
        while(!digitalRead(MENU_ENCSW_IN)); // wait till button released
        delay(10); // let button state settle
      }
      break;
    case SUBSELECT:  // scroll thru submenus
      if (enc !=0 ) { // move selector
        int submenupage = topmenu[topmenuindex].submenuindex / SUBMENU_LINES;  
        undrawselector(topmenu[topmenuindex].submenuindex);
        topmenu[topmenuindex].submenuindex+=enc;
        if (topmenu[topmenuindex].submenuindex <0) topmenu[topmenuindex].submenuindex=0;  // we don't wrap menus around, just stop at the ends
        if (topmenu[topmenuindex].submenuindex >=(topmenu[topmenuindex].numsubmenus -1) ) topmenu[topmenuindex].submenuindex=topmenu[topmenuindex].numsubmenus -1; 
        if ((topmenu[topmenuindex].submenuindex / SUBMENU_LINES) != submenupage) {
          drawsubmenus();  // redraw if we scrolled beyond the menu page
        }
        drawselector(topmenu[topmenuindex].submenuindex);   
      } 
      if (!digitalRead(MENU_ENCSW_IN)) { // submenu item has been selected so either go back to top or go to change parameter state
	      submenu * sub;
		    sub=topmenu[topmenuindex].submenus; //get pointer to the submenu array
        if (topmenu[topmenuindex].submenuindex ==(topmenu[topmenuindex].numsubmenus -1)) { // last submenu is always "back to topmenu"
            drawtopmenu(topmenuindex);
            drawselector(topmenuindex); 
            menustate=TOPSELECT;
           while(!digitalRead(MENU_ENCSW_IN)); // wait till button released
          delay(10); // let button state settle
        }
        else {
          undrawselector(topmenu[topmenuindex].submenuindex);
          draweditselector(topmenu[topmenuindex].submenuindex); // show we are editing
          menustate=PARAM_INPUT;  // change the submenu parameter
          while(!digitalRead(MENU_ENCSW_IN)); // wait till button released
          delay(10); // let button state settle
        }
      }        
      break;
    case PARAM_INPUT:  // changing value of a parameter
      if (enc !=0 ) { // change value
        index= topmenu[topmenuindex].submenuindex; // submenu field index
        submenu * sub=topmenu[topmenuindex].submenus; //get pointer to the current submenu array
        int16_t temp=*sub[index].parameter + enc*sub[index].step; // menu code uses ints - convert to floats when needed
        if (temp < (int16_t)sub[index].min) temp=sub[index].min;
        if (temp > (int16_t)sub[index].max) temp=sub[index].max;
        *sub[index].parameter=temp;
        if (sub[index].handler != 0) (*sub[index].handler)();  // call the handler function
        drawsubmenu(index);
      }
      if (!digitalRead(MENU_ENCSW_IN)) { // stop changing parameter
        undrawselector(topmenu[topmenuindex].submenuindex);
        drawselector(topmenu[topmenuindex].submenuindex); // show we are selecting again
        menustate=SUBSELECT;
        while(!digitalRead(MENU_ENCSW_IN)); // wait till button released
        delay(10); // let button state settle
      }   
      break;   
  } // end of case statement
  return (TRUE); // we have not exited the menus
}


